#!/usr/bin/env bash

set -euo pipefail

readonly ASDF_INSTALL_TYPE=${ASDF_INSTALL_TYPE:-version}
readonly TMPDIR=${TMPDIR:-/tmp}

fail() {
  echo "asdf-$TOOL_NAME: $*" >&2
  exit 1
}

install_micro() {
  local install_type=$1
  local version=$2
  local install_path=$3

  case "$install_type" in
    version)
      local bin_install_path="${install_path}/bin"
      local tmp_download_dir="$(get_tmp_dir)"
      local download_url="$(get_download_url "$version")"
      local download_path="${tmp_download_dir}/micro-${version}.tar.gz"
      mkdir -p "$bin_install_path"
      echo "Version is ${version}"
      echo "Downloading micro from ${download_url}"
      curl -s -L "$download_url" -o "$download_path"
      tar --wildcards -zxf "$download_path" --directory "$tmp_download_dir" '*/micro' --strip=1
      mv "$tmp_download_dir/micro" "$bin_install_path"
      chmod +x "$bin_install_path"
      rm -f "$download_path"
      ;;
    *)
      echo "Install of type [$install_type] not supported"
      ;;
  esac
}

get_arch() {
  local arch=$(uname -m | tr '[:upper:]' '[:lower:]')
  case "$arch" in
    x86_64)
      arch='64'
      ;;
  esac

  echo "$arch"
}

get_tmp_dir() {
  if [ -z "$TMPDIR" ]; then
    mktemp -d -t micro_XXXXXX
  else
    echo "$TMPDIR"
  fi
}

get_platform() {
  local plat=$(uname | tr '[:upper:]' '[:lower:]')
  case "$plat" in
    linux)
      plat='linux'
      ;;
    darwin)
      plat='osx'
      ;;
  esac

  echo "$plat"
}

get_download_url() {
  local version="$1"
  local arch=$(get_arch)
  local platform=$(get_platform)
  echo "https://github.com/zyedidia/micro/releases/download/v${version}/micro-${version}-${platform}${arch}.tar.gz"
}

install_micro "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
